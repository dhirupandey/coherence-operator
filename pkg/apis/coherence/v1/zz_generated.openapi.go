// +build !ignore_autogenerated

/*
 * Copyright (c) 2020, 2020 Oracle and/or its affiliates. All rights reserved.
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * http://oss.oracle.com/licenses/upl.
 */

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/coherence/v1.ApplicationSpec":         schema_pkg_apis_coherence_v1_ApplicationSpec(ref),
		"./pkg/apis/coherence/v1.CoherenceDeploymentSpec": schema_pkg_apis_coherence_v1_CoherenceDeploymentSpec(ref),
		"./pkg/apis/coherence/v1.CoherenceSpec":           schema_pkg_apis_coherence_v1_CoherenceSpec(ref),
		"./pkg/apis/coherence/v1.FluentdSpec":             schema_pkg_apis_coherence_v1_FluentdSpec(ref),
		"./pkg/apis/coherence/v1.ImageSpec":               schema_pkg_apis_coherence_v1_ImageSpec(ref),
		"./pkg/apis/coherence/v1.JVMSpec":                 schema_pkg_apis_coherence_v1_JVMSpec(ref),
		"./pkg/apis/coherence/v1.JvmDebugSpec":            schema_pkg_apis_coherence_v1_JvmDebugSpec(ref),
		"./pkg/apis/coherence/v1.JvmGarbageCollectorSpec": schema_pkg_apis_coherence_v1_JvmGarbageCollectorSpec(ref),
		"./pkg/apis/coherence/v1.JvmJmxmpSpec":            schema_pkg_apis_coherence_v1_JvmJmxmpSpec(ref),
		"./pkg/apis/coherence/v1.JvmMemorySpec":           schema_pkg_apis_coherence_v1_JvmMemorySpec(ref),
		"./pkg/apis/coherence/v1.JvmOutOfMemorySpec":      schema_pkg_apis_coherence_v1_JvmOutOfMemorySpec(ref),
		"./pkg/apis/coherence/v1.LoggingSpec":             schema_pkg_apis_coherence_v1_LoggingSpec(ref),
		"./pkg/apis/coherence/v1.NamedPortSpec":           schema_pkg_apis_coherence_v1_NamedPortSpec(ref),
		"./pkg/apis/coherence/v1.NetworkSpec":             schema_pkg_apis_coherence_v1_NetworkSpec(ref),
		"./pkg/apis/coherence/v1.PersistenceSpec":         schema_pkg_apis_coherence_v1_PersistenceSpec(ref),
		"./pkg/apis/coherence/v1.PersistentStorageSpec":   schema_pkg_apis_coherence_v1_PersistentStorageSpec(ref),
		"./pkg/apis/coherence/v1.PodDNSConfig":            schema_pkg_apis_coherence_v1_PodDNSConfig(ref),
		"./pkg/apis/coherence/v1.PortSpec":                schema_pkg_apis_coherence_v1_PortSpec(ref),
		"./pkg/apis/coherence/v1.PortSpecWithSSL":         schema_pkg_apis_coherence_v1_PortSpecWithSSL(ref),
		"./pkg/apis/coherence/v1.ProbeHandler":            schema_pkg_apis_coherence_v1_ProbeHandler(ref),
		"./pkg/apis/coherence/v1.ReadinessProbeSpec":      schema_pkg_apis_coherence_v1_ReadinessProbeSpec(ref),
		"./pkg/apis/coherence/v1.SSLSpec":                 schema_pkg_apis_coherence_v1_SSLSpec(ref),
		"./pkg/apis/coherence/v1.ScalingProbe":            schema_pkg_apis_coherence_v1_ScalingProbe(ref),
		"./pkg/apis/coherence/v1.ScalingSpec":             schema_pkg_apis_coherence_v1_ScalingSpec(ref),
		"./pkg/apis/coherence/v1.ServiceMonitorSpec":      schema_pkg_apis_coherence_v1_ServiceMonitorSpec(ref),
		"./pkg/apis/coherence/v1.ServiceSpec":             schema_pkg_apis_coherence_v1_ServiceSpec(ref),
		"./pkg/apis/coherence/v1.StartQuorum":             schema_pkg_apis_coherence_v1_StartQuorum(ref),
	}
}

func schema_pkg_apis_coherence_v1_ApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The specification of the application deployed into the CoherenceDeployment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The application type to execute. This field would be set if using the Coherence Graal image and running a none-Java application. For example if the application was a Node application this field would be set to \"node\". The default is to run a plain Java application.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"main": {
						SchemaProps: spec.SchemaProps{
							Description: "Class is the Coherence container main class.  The default value is com.tangosol.net.DefaultCacheServer. If the application type is non-Java this would be the name of the corresponding language specific runnable, for example if the application type is \"node\" the main may be a Javascript file.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args is the optional arguments to pass to the main class.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"workingDir": {
						SchemaProps: spec.SchemaProps{
							Description: "The application folder in the custom artifacts Docker image containing application artifacts. This will effectively become the working directory of the Coherence container. If not set the application directory default value is \"/app\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceDeploymentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceDeploymentSpec defines a deployment in a Coherence cluster. A deployment is one or more Pods that perform the same functionality, for example storage members.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/coherence/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name to use for the service account to use when RBAC is enabled The role bindings must already have been created as this chart does not create them it just sets the serviceAccountName value in the Pod spec.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"automountServiceAccountToken": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether or not to auto-mount the Kubernetes API credentials for a service account",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"operatorRequestTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "The timeout to apply to rest requests made back to the operator from Coherence Pods.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "The optional name of the Coherence cluster that this CoherenceDeployment belongs to. If this value is set this deployment will form a cluster with other deployments with the same cluster name. If not set the CoherenceDeployment's name will be used as the cluster name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the role that this deployment represents in a Coherence cluster. This value will be used to set the Coherence role property for all members of this role",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired number of cluster members of this deployment. This is a pointer to distinguish between explicit zero and not specified. Default value is 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"application": {
						SchemaProps: spec.SchemaProps{
							Description: "The optional application definition",
							Ref:         ref("./pkg/apis/coherence/v1.ApplicationSpec"),
						},
					},
					"coherence": {
						SchemaProps: spec.SchemaProps{
							Description: "The optional application definition",
							Ref:         ref("./pkg/apis/coherence/v1.CoherenceSpec"),
						},
					},
					"coherenceUtils": {
						SchemaProps: spec.SchemaProps{
							Description: "The configuration for the Coherence utils image",
							Ref:         ref("./pkg/apis/coherence/v1.ImageSpec"),
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging allows configuration of Coherence and java util logging.",
							Ref:         ref("./pkg/apis/coherence/v1.LoggingSpec"),
						},
					},
					"jvm": {
						SchemaProps: spec.SchemaProps{
							Description: "The JVM specific options",
							Ref:         ref("./pkg/apis/coherence/v1.JVMSpec"),
						},
					},
					"ports": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Ports specifies additional port mappings for the Pod and additional Services for those ports",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/coherence/v1.NamedPortSpec"),
									},
								},
							},
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Env is additional environment variable mappings that will be passed to the Coherence container in the Pod To specify extra variables add them as name value pairs the same as they would be added to a Pod containers spec, for example these values:\n\nenv:\n  - name \"FOO\"\n    value: \"foo-value\"\n  - name: \"BAR\"\n    value \"bar-value\"\n\nwill add the environment variable mappings FOO=\"foo-value\" and BAR=\"bar-value\"",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"healthPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The port that the health check endpoint will bind to.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "The readiness probe config to be used for the Pods in this deployment. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/",
							Ref:         ref("./pkg/apis/coherence/v1.ReadinessProbeSpec"),
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "The liveness probe config to be used for the Pods in this deployment. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/",
							Ref:         ref("./pkg/apis/coherence/v1.ReadinessProbeSpec"),
						},
					},
					"scaling": {
						SchemaProps: spec.SchemaProps{
							Description: "The configuration to control safe scaling.",
							Ref:         ref("./pkg/apis/coherence/v1.ScalingSpec"),
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is the optional resource requests and limits for the containers\n ref: http://kubernetes.io/docs/user-guide/compute-resources/\n\nBy default the cpu requests is set to zero and the cpu limit set to 32. This is because it appears that K8s defaults cpu to one and since Java 10 the JVM now correctly picks up cgroup cpu limits then the JVM will only see one cpu. By setting resources.requests.cpu=0 and resources.limits.cpu=32 it ensures that the JVM will see the either the number of cpus on the host if this is <= 32 or the JVM will see 32 cpus if the host has > 32 cpus. The limit is set to zero so that there is no hard-limit applied.\n\nNo default memory limits are applied.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations are free-form yaml that will be added to the store release as annotations Any annotations should be placed BELOW this annotations: key. For example if we wanted to include annotations for Prometheus it would look like this:\n\nannotations:\n  prometheus.io/scrape: \"true\"\n  prometheus.io/port: \"2408\"",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The extra labels to add to the all of the Pods in this deployments. Labels here will add to or override those defined for the cluster. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Volumes defines extra volume mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumes section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"volumeClaimTemplates": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "VolumeClaimTemplates defines extra PVC mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumeClaimTemplates section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts defines extra volume mounts to map to the additional volumes or PVCs declared above\n  in store.volumes and store.volumeClaimTemplates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Affinity controls Pod scheduling preferences.\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is the Node labels for pod assignment\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"key",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Tolerations is for nodes that have taints on them.\n  Useful if you want to dedicate nodes to just run the coherence container\nFor example:\n  tolerations:\n  - key: \"key\"\n    operator: \"Equal\"\n    value: \"value\"\n    effect: \"NoSchedule\"\n\n  ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext is the PodSecurityContext that will be added to all of the Pods in this deployment. See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"shareProcessNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostIPC": {
						SchemaProps: spec.SchemaProps{
							Description: "Use the host's ipc namespace. Optional: Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure various networks and DNS settings for Pods in this rolw.",
							Ref:         ref("./pkg/apis/coherence/v1.NetworkSpec"),
						},
					},
					"startQuorum": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"deployment",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The deployments that must be started before this deployment can start.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/coherence/v1.StartQuorum"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.ApplicationSpec", "./pkg/apis/coherence/v1.CoherenceSpec", "./pkg/apis/coherence/v1.ImageSpec", "./pkg/apis/coherence/v1.JVMSpec", "./pkg/apis/coherence/v1.LocalObjectReference", "./pkg/apis/coherence/v1.LoggingSpec", "./pkg/apis/coherence/v1.NamedPortSpec", "./pkg/apis/coherence/v1.NetworkSpec", "./pkg/apis/coherence/v1.ReadinessProbeSpec", "./pkg/apis/coherence/v1.ScalingSpec", "./pkg/apis/coherence/v1.StartQuorum", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The Coherence specific configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"storageEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "A boolean flag indicating whether members of this deployment are storage enabled. This value will set the corresponding coherence.distributed.localstorage System property. If not specified the default value is true. This flag is also used to configure the ScalingPolicy value if a value is not specified. If the StorageEnabled field is not specified or is true the scaling will be safe, if StorageEnabled is set to false scaling will be parallel.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cacheConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheConfig is the name of the cache configuration file to use",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overrideConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "OverrideConfig is name of the Coherence operational configuration override file, the default is tangosol-coherence-override.xml",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "The Coherence log level, default being 5 (info level).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"persistence": {
						SchemaProps: spec.SchemaProps{
							Description: "Persistence values configure the on-disc data persistence settings. The bool Enabled enables or disabled on disc persistence of data.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistenceSpec"),
						},
					},
					"management": {
						SchemaProps: spec.SchemaProps{
							Description: "Management configures Coherence management over REST\n  Note: Coherence management over REST will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics configures Coherence metrics publishing\n  Note: Coherence metrics publishing will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"excludeFromWKA": {
						SchemaProps: spec.SchemaProps{
							Description: "Exclude members of this deployment from being part of the cluster's WKA list.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"skipVersionCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "Certain features rely on a version check prior to starting the server, e.g. metrics requires >= 12.2.1.4. The version check relies on the ability of the strat script to find coherence.jar, if due to how the image has been built this check is failing setting this flag to true will skip version checking and assume that the lates coherence.jar is being used.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.PersistenceSpec", "./pkg/apis/coherence/v1.PortSpecWithSSL"},
	}
}

func schema_pkg_apis_coherence_v1_FluentdSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FluentdSpec defines the settings for the fluentd image",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Controls whether or not log capture via a Fluentd sidecar container to an EFK stack is enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"configFileInclude": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional Fluentd configuration file to be added as an @include to the main Fluentd configuration.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configFileOverride": {
						SchemaProps: spec.SchemaProps{
							Description: "The Fluentd configuration file to use. This file will completely override the default Fluentd configuration normally provided by the Coherence Operator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "This value should be the source.tag from fluentd.application.configFile.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"esHosts": {
						SchemaProps: spec.SchemaProps{
							Description: "A comma delimited string of Elasticsearch hosts. These will be used for the hosts variable in the ES section of the Fluentd configuration as described in https://docs.fluentd.org/output/elasticsearch",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"esUser": {
						SchemaProps: spec.SchemaProps{
							Description: "The Elasticsearch user name. This will be used for the user variable in the ES section of the Fluentd configuration as described in https://docs.fluentd.org/output/elasticsearch",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"esPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "The Elasticsearch password. This will be used for the user variable in the ES section of the Fluentd configuration as described in https://docs.fluentd.org/output/elasticsearch",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"esSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the Secret to use to obtain the Elasticsearch details.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"esSecretHostsKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The key in the secret to use to obtain the Elasticsearch hosts value. If the EsHosts field has a value that will take precedence over the value from the secret. If not specified the default value will be \"hosts\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"esSecretUserKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The key in the secret to use to obtain the Elasticsearch user name value. If the EsUser field has a value that will take precedence over the value from the secret. If not specified the default value will be \"user\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"esSecretPasswordKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The key in the secret to use to obtain the Elasticsearch password value. If the EsPassword field has a value that will take precedence over the value from the secret. If not specified the default value will be \"password\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSpec defines the settings for a Docker image",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_JVMSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The JVM configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"classpath": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Classpath specifies additional items to add to the classpath of the JVM.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args specifies the options (System properties, -XX: args etc) to pass to the JVM.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"debug": {
						SchemaProps: spec.SchemaProps{
							Description: "The settings for enabling debug mode in the JVM.",
							Ref:         ref("./pkg/apis/coherence/v1.JvmDebugSpec"),
						},
					},
					"useContainerLimits": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true Adds the  -XX:+UseContainerSupport JVM option to ensure that the JVM respects any container resource limits. The default value is true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"flightRecorder": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, enabled continuour flight recorder recordings. This will add the JVM options -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:FlightRecorderOptions=defaultrecording=true,dumponexit=true,dumponexitpath=/dumps",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"gc": {
						SchemaProps: spec.SchemaProps{
							Description: "Set JVM garbage collector options.",
							Ref:         ref("./pkg/apis/coherence/v1.JvmGarbageCollectorSpec"),
						},
					},
					"diagnosticsVolume": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.VolumeSource"),
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the JVM memory options.",
							Ref:         ref("./pkg/apis/coherence/v1.JvmMemorySpec"),
						},
					},
					"jmxmp": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure JMX using JMXMP.",
							Ref:         ref("./pkg/apis/coherence/v1.JvmJmxmpSpec"),
						},
					},
					"useJibClasspath": {
						SchemaProps: spec.SchemaProps{
							Description: "A flag indicating whether to automatically add the default classpath for images created by the JIB tool https://github.com/GoogleContainerTools/jib If true then the /app/lib/* /app/classes and /app/resources entries are added to the JVM classpath. The default value fif not specified is true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.JvmDebugSpec", "./pkg/apis/coherence/v1.JvmGarbageCollectorSpec", "./pkg/apis/coherence/v1.JvmJmxmpSpec", "./pkg/apis/coherence/v1.JvmMemorySpec", "k8s.io/api/core/v1.VolumeSource"},
	}
}

func schema_pkg_apis_coherence_v1_JvmDebugSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The JVM Debug specific configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled is a flag to enable or disable running the JVM in debug mode. Default is disabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"suspend": {
						SchemaProps: spec.SchemaProps{
							Description: "A boolean true if the target VM is to be suspended immediately before the main class is loaded; false otherwise. The default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"attach": {
						SchemaProps: spec.SchemaProps{
							Description: "Attach specifies the address of the debugger that the JVM should attempt to connect back to instead of listening on a port.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port that the debugger will listen on; the default is 5005.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_JvmGarbageCollectorSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Options for managing the JVM garbage collector.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"collector": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the JVM garbage collector to use. G1 - adds the -XX:+UseG1GC option CMS - adds the -XX:+UseConcMarkSweepGC option Parallel - adds the -XX:+UseParallelGC Default - use the JVMs default collector The field value is case insensitive If not set G1 is used. If set to a value other than those above then the default collector for the JVM will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args specifies the GC options to pass to the JVM.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable the following GC logging args  -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime Default is true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_JvmJmxmpSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Options for configuring JMX using JMXMP.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true the JMXMP support will be enabled. Default is false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port tht the JMXMP MBeanServer should bind to. If not set the default port is 9099",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_JvmMemorySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Options for managing the JVM memory.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"heapSize": {
						SchemaProps: spec.SchemaProps{
							Description: "HeapSize is the min/max heap value to pass to the JVM. The format should be the same as that used for Java's -Xms and -Xmx JVM options. If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stackSize": {
						SchemaProps: spec.SchemaProps{
							Description: "StackSize is the stack size value to pass to the JVM. The format should be the same as that used for Java's -Xss JVM option. If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metaspaceSize": {
						SchemaProps: spec.SchemaProps{
							Description: "MetaspaceSize is the min/max metaspace size to pass to the JVM. This sets the -XX:MetaspaceSize and -XX:MaxMetaspaceSize=size JVM options. If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"directMemorySize": {
						SchemaProps: spec.SchemaProps{
							Description: "DirectMemorySize sets the maximum total size (in bytes) of the New I/O (the java.nio package) direct-buffer allocations. This value sets the -XX:MaxDirectMemorySize JVM option. If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nativeMemoryTracking": {
						SchemaProps: spec.SchemaProps{
							Description: "Adds the -XX:NativeMemoryTracking=mode  JVM options where mode is on of \"off\", \"summary\" or \"detail\", the default is \"summary\" If not set to \"off\" also add -XX:+PrintNMTStatistics",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"onOutOfMemory": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the JVM behaviour when an OutOfMemoryError occurs.",
							Ref:         ref("./pkg/apis/coherence/v1.JvmOutOfMemorySpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.JvmOutOfMemorySpec"},
	}
}

func schema_pkg_apis_coherence_v1_JvmOutOfMemorySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Options for managing the JVM behaviour when an OutOfMemoryError occurs.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exit": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true the JVM will exit when an OOM error occurs. Default is true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"heapDump": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true adds the -XX:+HeapDumpOnOutOfMemoryError JVM option to cause a heap dump to be created when an OOM error occurs. Default is true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_LoggingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LoggingSpec defines the settings for the Coherence Pod logging",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"configFile": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigFileInclude allows the location of the Java util logging configuration file to be overridden.\n If this value is not set the logging.properties file embedded in this chart will be used.\n If this value is set the configuration will be located by trying the following locations in order:\n   1. If store.logging.configMapName is set then the config map will be mounted as a volume and the logging\n        properties file will be located as a file location relative to the ConfigMap volume mount point.\n   2. If userArtifacts.imageName is set then using this value as a file name relative to the location of the\n        configuration files directory in the user artifacts image.\n   3. Using this value as an absolute file name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMapName allows a config map to be mounted as a volume containing the logging\n configuration file to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fluentd": {
						SchemaProps: spec.SchemaProps{
							Description: "Configures whether Fluentd is enabled and the configuration of the Fluentd side-car container",
							Ref:         ref("./pkg/apis/coherence/v1.FluentdSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.FluentdSpec"},
	}
}

func schema_pkg_apis_coherence_v1_NamedPortSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- NamedPortSpec struct ---------------------------------------------------- NamedPortSpec defines a named port for a Coherence component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name specifies the name of th port.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceMonitor": {
						SchemaProps: spec.SchemaProps{
							Description: "A flag that, when true, indicates that a Prometheus ServiceMonitor resource should be created for the Service being exposed for this port.",
							Ref:         ref("./pkg/apis/coherence/v1.ServiceMonitorSpec"),
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port specifies the port used.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol for container port. Must be UDP or TCP. Defaults to \"TCP\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Service specifies the service used to expose the port.",
							Ref:         ref("./pkg/apis/coherence/v1.ServiceSpec"),
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"hostPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"hostIP": {
						SchemaProps: spec.SchemaProps{
							Description: "What host IP to bind the external port to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.ServiceMonitorSpec", "./pkg/apis/coherence/v1.ServiceSpec"},
	}
}

func schema_pkg_apis_coherence_v1_NetworkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkSpec configures various networking and DNS settings for Pods in a deployment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dnsConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
							Ref:         ref("./pkg/apis/coherence/v1.PodDNSConfig"),
						},
					},
					"dnsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostAliases": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"ip",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.HostAlias"),
									},
								},
							},
						},
					},
					"hostNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.PodDNSConfig", "k8s.io/api/core/v1.HostAlias"},
	}
}

func schema_pkg_apis_coherence_v1_PersistenceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The spec for Coherence persistence.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The persistence mode to use. Valid choices are \"on-demand\", \"active\", \"active-async\". This field will set the coherence.distributed.persistence-mode System property to \"default-\" + Mode.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"persistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaim allows the configuration of a normal k8s persistent volume claim for persistence data.",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
					"volume": {
						SchemaProps: spec.SchemaProps{
							Description: "Volume allows the configuration of a normal k8s volume mapping for persistence data instead of a persistent volume claim. If a value is defined for store.persistence.volume then no PVC will be created and persistence data will instead be written to this volume. It is up to the deployer to understand the consequences of this and how the guarantees given when using PVCs differ to the storage guarantees for the particular volume type configured here.",
							Ref:         ref("k8s.io/api/core/v1.VolumeSource"),
						},
					},
					"snapshots": {
						SchemaProps: spec.SchemaProps{
							Description: "Snapshot values configure the on-disc persistence data snapshot (backup) settings. These settings enable a different location for persistence snapshot data. If not set then snapshot files will be written to the same volume configured for persistence data in the Persistence section.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistentStorageSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.PersistentStorageSpec", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.VolumeSource"},
	}
}

func schema_pkg_apis_coherence_v1_PersistentStorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistenceStorageSpec defines the persistence settings for the Coherence",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"persistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaim allows the configuration of a normal k8s persistent volume claim for persistence data.",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
					"volume": {
						SchemaProps: spec.SchemaProps{
							Description: "Volume allows the configuration of a normal k8s volume mapping for persistence data instead of a persistent volume claim. If a value is defined for store.persistence.volume then no PVC will be created and persistence data will instead be written to this volume. It is up to the deployer to understand the consequences of this and how the guarantees given when using PVCs differ to the storage guarantees for the particular volume type configured here.",
							Ref:         ref("k8s.io/api/core/v1.VolumeSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.VolumeSource"},
	}
}

func schema_pkg_apis_coherence_v1_PodDNSConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nameservers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"searches": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"options": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PodDNSConfigOption"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodDNSConfigOption"},
	}
}

func schema_pkg_apis_coherence_v1_PortSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- PortSpec struct ---------------------------------------------------- PortSpec defines the port settings for a Coherence component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port specifies the port used.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol for container port. Must be UDP or TCP. Defaults to \"TCP\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Service specifies the service used to expose the port.",
							Ref:         ref("./pkg/apis/coherence/v1.ServiceSpec"),
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"hostPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"hostIP": {
						SchemaProps: spec.SchemaProps{
							Description: "What host IP to bind the external port to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.ServiceSpec"},
	}
}

func schema_pkg_apis_coherence_v1_PortSpecWithSSL(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PortSpecWithSSL defines a port with SSL settings for a Coherence component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable or disable flag.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port to bind to.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"ssl": {
						SchemaProps: spec.SchemaProps{
							Description: "SSL configures SSL settings for a Coherence component",
							Ref:         ref("./pkg/apis/coherence/v1.SSLSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.SSLSpec"},
	}
}

func schema_pkg_apis_coherence_v1_ProbeHandler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The definition of a probe handler.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exec": {
						SchemaProps: spec.SchemaProps{
							Description: "One and only one of the following should be specified. Exec specifies the action to take.",
							Ref:         ref("k8s.io/api/core/v1.ExecAction"),
						},
					},
					"httpGet": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPGet specifies the http request to perform.",
							Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
						},
					},
					"tcpSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
							Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
	}
}

func schema_pkg_apis_coherence_v1_ReadinessProbeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReadinessProbeSpec defines the settings for the Coherence Pod readiness probe",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exec": {
						SchemaProps: spec.SchemaProps{
							Description: "One and only one of the following should be specified. Exec specifies the action to take.",
							Ref:         ref("k8s.io/api/core/v1.ExecAction"),
						},
					},
					"httpGet": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPGet specifies the http request to perform.",
							Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
						},
					},
					"tcpSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
							Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
						},
					},
					"initialDelaySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"periodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to perform the probe.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"successThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum consecutive successes for the probe to be considered successful after having failed.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"failureThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
	}
}

func schema_pkg_apis_coherence_v1_SSLSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SSLSpec defines the SSL settings for a Coherence component over REST endpoint.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled is a boolean flag indicating whether enables or disables SSL on the Coherence management over REST endpoint, the default is false (disabled).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secrets is the name of the k8s secrets containing the Java key stores and password files.\n  This value MUST be provided if SSL is enabled on the Coherence management over ReST endpoint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStore": {
						SchemaProps: spec.SchemaProps{
							Description: "Keystore is the name of the Java key store file in the k8s secret to use as the SSL keystore\n  when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStorePasswordFile": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStorePasswordFile is the name of the file in the k8s secret containing the keystore\n  password when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyPasswordFile": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStorePasswordFile is the name of the file in the k8s secret containing the key\n  password when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStoreAlgorithm": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStoreAlgorithm is the name of the keystore algorithm for the keystore in the k8s secret\n  used when configuring component over REST to use SSL. If not set the default is SunX509",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStoreProvider": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStoreProvider is the name of the keystore provider for the keystore in the k8s secret\n  used when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStoreType": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStoreType is the name of the Java keystore type for the keystore in the k8s secret used\n  when configuring component over REST to use SSL. If not set the default is JKS.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStore": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStore is the name of the Java trust store file in the k8s secret to use as the SSL\n  trust store when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStorePasswordFile": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStorePasswordFile is the name of the file in the k8s secret containing the trust store\n  password when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStoreAlgorithm": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStoreAlgorithm is the name of the keystore algorithm for the trust store in the k8s\n  secret used when configuring component over REST to use SSL.  If not set the default is SunX509.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStoreProvider": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStoreProvider is the name of the keystore provider for the trust store in the k8s\n  secret used when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStoreType": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStoreType is the name of the Java keystore type for the trust store in the k8s secret\n  used when configuring component over REST to use SSL. If not set the default is JKS.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requireClientCert": {
						SchemaProps: spec.SchemaProps{
							Description: "RequireClientCert is a boolean flag indicating whether the client certificate will be\n  authenticated by the server (two-way SSL) when configuring component over REST to use SSL.\n  If not set the default is false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_ScalingProbe(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ScalingProbe is the handler that will be used to determine how to check for StatusHA in a CoherenceDeployment. StatusHA checking is primarily used during scaling of a deployment, a deployment must be in a safe Phase HA state before scaling takes place. If StatusHA handler is disabled for a deployment (by specifically setting Enabled to false then no check will take place and a deployment will be assumed to be safe).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exec": {
						SchemaProps: spec.SchemaProps{
							Description: "One and only one of the following should be specified. Exec specifies the action to take.",
							Ref:         ref("k8s.io/api/core/v1.ExecAction"),
						},
					},
					"httpGet": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPGet specifies the http request to perform.",
							Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
						},
					},
					"tcpSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
							Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after which the handler times out (only applies to http and tcp handlers). Defaults to 1 second. Minimum value is 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
	}
}

func schema_pkg_apis_coherence_v1_ScalingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The configuration to control safe scaling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"policy": {
						SchemaProps: spec.SchemaProps{
							Description: "ScalingPolicy describes how the replicas of the deployment will be scaled. The default if not specified is based upon the value of the StorageEnabled field. If StorageEnabled field is not specified or is true the default scaling will be safe, if StorageEnabled is set to false the default scaling will be parallel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"probe": {
						SchemaProps: spec.SchemaProps{
							Description: "The probe to use to determine whether a deployment is Phase HA. If not set the default handler will be used. In most use-cases the default handler would suffice but in advanced use-cases where the application code has a different concept of Phase HA to just checking Coherence services then a different handler may be specified.",
							Ref:         ref("./pkg/apis/coherence/v1.ScalingProbe"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.ScalingProbe"},
	}
}

func schema_pkg_apis_coherence_v1_ServiceMonitorSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The ServiceMonitor spec for a port service.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled is a flag to enable or disable creation of a Prometheus ServiceMonitor for a port. If Prometheus ServiceMonitor CR is not installed no ServiceMonitor then even if this flag is true no ServiceMonitor will be created.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Additional labels to add to the ServiceMonitor. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTP path to scrape for metrics.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scheme": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTP scheme to use for scraping.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional HTTP URL parameters",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
					"interval": {
						SchemaProps: spec.SchemaProps{
							Description: "Interval at which metrics should be scraped",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scrapeTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout after which the scrape is ended",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_coherence_v1_ServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- ServiceSpec struct ------------------------------------------------- ServiceSpec defines the settings for a Service",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled controls whether to create the service yaml or not",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional name to use to override the generated service name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The service port value",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is the K8s service type (typically ClusterIP or LoadBalancer) The default is \"ClusterIP\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalIPs": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"clusterIP": {
						SchemaProps: spec.SchemaProps{
							Description: "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerIP": {
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancerIP is the IP address of the load balancer",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The extra labels to add to the service. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is free form yaml that will be added to the service annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerSourceRanges": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"externalName": {
						SchemaProps: spec.SchemaProps{
							Description: "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Kind to be ExternalName.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalTrafficPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthCheckNodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Kind is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"publishNotReadyAddresses": {
						SchemaProps: spec.SchemaProps{
							Description: "publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"sessionAffinityConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "sessionAffinityConfig contains the configurations of session affinity.",
							Ref:         ref("k8s.io/api/core/v1.SessionAffinityConfig"),
						},
					},
					"ipFamily": {
						SchemaProps: spec.SchemaProps{
							Description: "ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SessionAffinityConfig"},
	}
}

func schema_pkg_apis_coherence_v1_StartQuorum(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StartQuorum defines the order that deployments will be started in a Coherence cluster made up of multiple deployments.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"deployment": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of deployment that this deployment depends on.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "The namespace that the deployment that this deployment depends on is installed into. Default to the same namespace as this deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"podCount": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of the Pods that should have been started before this deployments will be started, defaults to all Pods for the deployment.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}
